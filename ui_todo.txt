PRIORITY ---------------------------------------------------------------------

- REVIEW: dropdown!
- REWRITE: colorpicker with grid/flexbox.

LOW-LEVEL --------------------------------------------------------------------

- finish libpng
	- revive imagefile (libjpeg, libpng, bmp)
		- revive sg_*

NW ---------------------------------------------------------------------------

- BUG parent doesn't get repainted right after closing a child popup.
- FEAT get a window's children in z-order so we can forward mouse wheel events
to non-activable children.

TR ---------------------------------------------------------------------------

- tr: store paragraph base direction for all paragraphs.
	- text_run.align_x <- override for all enclosed lines/paragraphs.

UI ---------------------------------------------------------------------------

- design bug: widget module autoloading vs css decl. order conflict.
- design bug: allow freeing self inside events (with a double-free barrier).

EDITBOX ----------------------------------------------------------------------

- mask:
	- select/navigate text with the mask or without
	- 0	digit required
	- 9	digit or space, optional
	- #	digit or space or +/-
	- L	a-zA-Z

- eye_icon for password mask.

- make the caret a layer so it can be styled.
--make selection rectangles layers so they can be styled.
--drag & drop selection in/out of the editor and between editboxes.

- IME integration.

DROPDOWN ---------------------------------------------------------------------

- maskedit dropdown with calendar.

- autocomplete mode: while typing, the pickup grid filters the results
	and the editbox contain the rest of the text selected.

TABLIST ----------------------------------------------------------------------

- vertical left/right

BUTTON -----------------------------------------------------------------------

- profiles: text, outlined, contained, toggle

- icon, icon_align left/right

CHECKBOX ---------------------------------------------------------------------

- tristate

- children, indent

SLIDER -----------------------------------------------------------------------

- label and/or numeric editbox on the left side or right side.

CALENDAR ---------------------------------------------------------------------

- review/add a date-math lib to luapower

- make week start day configurable (ui.week_start_day = 'Mo' / 'Su')
	- make sunday column movable but only to position 1 or 7
- add month & year above with left-right nav buttons
- change month by keyboard left-right page-up/down navigation
- change start week (scroll weeks vertically) by keyboard up/down navigation
	- scroll with scroll wheel too
	- alternate cell colors on consecutive months
	- change title to reflect month-in-view and surrounding months
		- we're always viewing 2 or 3 months
- multi-cell select restricted to consecutive days
	- make it work with vertical scrolling as well
	- allow multiple restricted multi-cell selections
- left bar with week-of-the-year number

COLOR PICKER -----------------------------------------------------------------

- editboxes: hsL
	- parse the text and change the display accordingly
- display chosen color + complementary hues
- color history / select color from history
	- history name so we can have diff. histories depending on usage context
- color dropper tool from anywhere on the desktop
- hue wheel with configurable granularity + lum/sat triangle
- hue/sat square with lum ramp instead of sat/lum with hue ramp

MENU BAR ---------------------------------------------------------------------

-

MENU -------------------------------------------------------------------------

-

POPUP MENU -------------------------------------------------------------------

-

LINEAR CALENDAR --------------------------------------------------------------

-

GRID -------------------------------------------------------------------------


- cell navigation: go to next/prev row on left-right nav
- cell navigation: tab to advance cell

--ctrl+page-up/page-down navigation based on fixed pages

- multiple row move
- row move with animation

- col %-size

- cell/col border collapse option

- cell formatting: format-string/class/function

- tooltip display on hover for clipped cells

- editable
	- immediate mode (click) or click-click mode
	- tab goes to next cell
	- right/left goes to next/prev cell
	- automatic cell advancing
	- cell advancing with tab

- tree-column
	- expand/collapse-all nodes option
	- row moving to another parent via drag & drop

- col colapse/show

- col shrink/expand-to-widest-row option on double-clicking between columns


LATER/DATASET
- sorting
	- sort by multiple columns
	? client-side sorting with collation
- filtering
	- quick filter (i.e. by value list)
	- search-in-column filter
	- result can be highlighting or hiding
- filter by range
- grouping:
	- group-by hierarchy
	- group-by multiple fields
	- expand/collapse all children
	- hide/show grouping header
	- invert selection
	- row moving to another group via drag&drop


LATER/HARD
- column bands
- summary row
- save/load grid configurations

LATER/NEVER
- auto row height based on wrapped text
- multi-line cell text with word-wrapping
- cell auto-ellipsis
- vertical grid with bands


DOCKING TABLIST --------------------------------------------------------------

- define docking layers and auto-accept tabs on the same docking_group.
- drag tab to dock sides to split a dock tablist horizontally or vertically.

- later: move tab outside its window to wrap in a popup.
- later: move a popup over the window to dock it back.

SETTINGS WIDGET --------------------------------------------------------------

- group options by category and show a scroll-following list of categories on the side.
- filter/highlight options which have changed from default and show the default.
- option type definitions for booleans, numbers, strings, multiple options etc.
	- boolean -> toggle, checkbox
	- number + range + step -> editbox, slider
	- single option -> choicebutton, slider, dropdown, radio buttons, grid with checkbox column
	- multiple options -> checkboxes
	- multiple options grouped -> checkbox tree
	- text -> editbox, multiline editbox
	- records -> grid, grid + CRUD,
	- color -> color picker
	- color scheme (i.e. list of colors) -> little wizard
	- embelishments:
		- description
		- warning popup when changing the option
		-
		- image
		- buttons
- use an object with r/w properties to get/set the settings.
- cascading hierarchy of options files:
	- "project" options file (look into dir and all parent dirs).
	- "home" options file (look in all HOME locations -- put that in fs or path).
	- other custom option files.
- show options file hierarchy and select which file to affect changes to.


RTL --------------------------------------------------------------------------

- menu bar right alignment and reverse item order
- tablist right alignment and reverse item order
- menu right alignment
- button bar right alignment and mirror specific mirrorable icons
- status bar reverse item order
- use auto-reversible hierarchical flow layouts to layout:
	- label + actionable pairs, eg:
		- label + editbox combinations
		- icon + title + x-button on tablist items
	- a row of buttons
	- entire sections of the UI


BETTER TAB-ORDER ALGORITHM ---------------------------------------------------

--TODO: make a new tab-order-assigning algorithm based on horizontal and
--vertical overlap between widgets and the vertical/horizontal distance
--between them.

--TIPS: make a weighted DAG from inspecting all positiblities
--(that's O(n^2) btw) and then sort the nodes at each level based on the
--weights and walk the graph in toplogical+weighted order.

--[[
local function overlap(
	ax1, ay1, ax2, ay2,
	bx1, by1, bx2, by2,
	t1, t2
)
	local overlap_v = math.min(ay2, by2) - math.max(ay1, by1)
	local max_overlap_v = math.min(ay2 - ay1, by2 - by1)
	local distance_h = bx1 - ax2

	print(
		t1.id or t1.parent.id,
		t2.id or t2.parent.id,
		string.format('%.2f\t%.2f', overlap_v, distance_h),
		not (overlap_v < 0 or distance_h < 0) and '!!!' or ''
	)

	if overlap_v < 0 or distance_h < 0 then
		return 0
	end
	assert(max_overlap_v > 0)

	return (overlap_v / max_overlap_v) / distance_h
end

	print()
	print()
	print()

	if self.iswindow_view then
		for i,t in ipairs(t) do
			local x1, y1 = t:to_window(0, 0)
			local x2, y2 = t:to_window(t.w, t.h)
			print(
				t.id or t.parent.id,
				x1, y1
			)
		end
	end

]]

